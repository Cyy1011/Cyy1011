import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class PlagiarismChecker {
    public static void main(String[] args) {
        if (args.length < 3) {
            System.out.println("请提供原文文件路径、抄袭版论文文件路径和答案文件路径作为命令行参数！");
            return;
        }

        String originalFilePath = args[0];
        String plagiarizedFilePath = args[1];
        String answerFilePath = args[2];

        try {
            String originalText = readFile(originalFilePath);
            String plagiarizedText = readFile(plagiarizedFilePath);
            double similarity = calculateSimilarity(originalText, plagiarizedText);
            writeResult(answerFilePath, similarity);
            System.out.println("重复率计算完成！");
        } catch (IOException e) {
            System.out.println("发生错误：" + e.getMessage());
        }
    }

    private static String readFile(String filePath) throws IOException {
        StringBuilder content = new StringBuilder();
        try (BufferedReader reader = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = reader.readLine()) != null) {
                content.append(line).append("\n");
            }
        }
        return content.toString();
    }

    private static double calculateSimilarity(String originalText, String plagiarizedText) {
        int originalLength = originalText.length();
        int plagiarizedLength = plagiarizedText.length();

        int[][] dp = new int[originalLength + 1][plagiarizedLength + 1];

        for (int i = 0; i <= originalLength; i++) {
            for (int j = 0; j <= plagiarizedLength; j++) {
                if (i == 0) {
                    dp[i][j] = j;
                } else if (j == 0) {
                    dp[i][j] = i;
                } else if (originalText.charAt(i - 1) == plagiarizedText.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;
                }
            }
        }

        double similarity = (1 - (double) dp[originalLength][plagiarizedLength] / Math.max(originalLength, plagiarizedLength)) * 100;
        return Math.round(similarity * 100.0) / 100.0; // 保留两位小数
    }

    private static void writeResult(String filePath, double similarity) throws IOException {
        try (FileWriter writer = new FileWriter(filePath)) {
            writer.write(String.format("%.2f", similarity));
        }
    }
}
